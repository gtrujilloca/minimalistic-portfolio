---
import type { Profile, KeyboardManager } from "@/types";
import { SOCIAL_NETWORK_ICONS } from "@/constants/network.ts";

interface Props {
  profiles: Profile[];
  keyboard_manager: KeyboardManager,
  languages: { label: string; href: string }[],
}

const { profiles, keyboard_manager, languages } = Astro.props;
const { command_palette, placeholder, press } = keyboard_manager;

const languageInfo = languages.map(({ label, href }) => {
  return {
    id: label,
    title: `Switch to ${label}`,
    url: href,
    section: "Language",
  };
})
const profileInfo = profiles.map(({ network, url }) => {
  const icon = SOCIAL_NETWORK_ICONS[network];
  const firstNetworkLetter = network.charAt(0).toUpperCase();

  return {
    id: network,
    title: `Visit ${network}`,
    hotkey: `ctrl+${firstNetworkLetter}`,
    icon,
    url,
    section: "Social",
  };
});

const profileInfoString = JSON.stringify(profileInfo);
const languageInfoString = JSON.stringify(languageInfo);
---

<footer class="no-print">
  {press} <kbd>Cmd</kbd> + <kbd>k</kbd> {command_palette}.
</footer>

<ninja-keys
  data-network-info={profileInfoString}
  data-language-info={languageInfoString}
  placeholder={placeholder}
  hideBreadcrumbs></ninja-keys>

<script>
  import "ninja-keys";

  const ninja: any = document.querySelector("ninja-keys");

  if (ninja !== null) {
    const profileInfoString = ninja.getAttribute("data-network-info");
    const languageInfoString = ninja.getAttribute("data-language-info");
    const dataInfo = JSON.parse(profileInfoString || "[]");
    const languageInfo = JSON.parse(languageInfoString || "[]");
    console.log(languageInfo);
    const socialData = dataInfo.map((info:any) => {
      return {
        ...info,
        handler: () => {
          window.open(info.url, "_blank");
        },
      };
    });

    const languageData = languageInfo.map((info:any) => {
      return {
        ...info,
        handler: () => {
          const url = new URL(window.location.href);
          url.pathname = info.url;
          window.location.href = url.href;
        },
      };
    });

    ninja.data = [
      {
        id: "print",
        title: " Print document",
        hotkey: "ctrl+P",
        icon: `
        <svg width="16" height="16" style="margin-right: 8px" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
        </svg>
        `,
        section: "Actions",
        handler: () => {
          window.print();
        },
      },
      ...languageData,
      ...socialData,
    ];
  }
</script>
<style>
  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }

  }

  footer {
    background-color: #fdfdfd;
    border-top: 1px solid #eee;
    padding-block: 0.5rem;
    position: fixed;
    bottom: 0;
    text-align: center;
    width: 100%;
    font-size: 0.85rem;
    view-timeline-name: --reaviling;
    view-timeline-axis: block;

    animation: linear 0.3s fadeIn;
    animation-timeline: --reaviling;
    animation-range: entry 100% cover 10%;
  }
  kbd {
    background-color: #eee;
    padding: 2px 4px;
    font-size: 0.9rem;
    border-radius: 4px;
  }
</style>
